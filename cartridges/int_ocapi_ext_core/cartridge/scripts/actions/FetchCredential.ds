/**
* Â©2013-2018 salesforce.com, inc. All rights reserved.
*
* Wrapper to update Store credential details
*
*  @input StoreId : Object StoreId of the store.
*  @output StoreObj : Object StoreId of the store.
*  @output ErrorMessage : String 
*
*/

importPackage( dw.system );
importPackage( dw.catalog);

importScript("int_ocapi_ext_core:api/services/StoreCredentialsCO.ds");
importScript("int_ocapi_ext_core:api/EAStatus.ds");

function execute( args : PipelineDictionary ) : Number {
    var result = fetchCredentials(args.StoreId);
    if (result.ErrorMessage) {
        args.ErrorMessage = result.ErrorMessage;
        return PIPELET_ERROR;
    } else {
        args.StoreObj = result.StoreObj;
        return PIPELET_NEXT;
    }
}

/**
 * fetchCredentials - fetches the store details based on the storeID
 * @param : storeId
 */
function fetchCredentials(storeId) {
    var result ={};
    var log : Log = Logger.getLogger("instore-audit-trail");
    log.info("FetchCredential: entering script");
    if (empty(storeId)) {
        var eaStatus = new EAStatus();
        eaStatus.findMessage("EA_SESSION_400");
        result ={ErrorMessage:eaStatus.stringify()};
        log.info("FetchCredential: exiting script with EA_SESSION_400 error");
        return result;
    }

    var storeCredentials = new StoreCredentials();
    var StoreObj = storeCredentials.adminCredential(storeId);
    
    log.info("FetchCredential: fetching credentials for store " + storeId);
    log.info("FetchCredential: exiting script without error");
    return {StoreObj : StoreObj};
}

module.exports = {
    fetchCredentials : fetchCredentials
};
