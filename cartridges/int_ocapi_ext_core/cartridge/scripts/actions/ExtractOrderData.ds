/**
* Â©2013-2018 salesforce.com, inc. All rights reserved.
*
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Orders : dw.util.Iterator 
*   @output JSONResponse : Object
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.order );
importPackage( dw.catalog );
importPackage( dw.content );
importScript("int_ocapi_ext_core:api/EAStatus.ds");
importScript("int_ocapi_ext_core:util/ImageUtils.ds");

function execute( args : PipelineDictionary ) : Number {
    var log : Log = Logger.getLogger("instore-audit-trail");
    log.info("ExtractOrderData: entering script");
    
    var orders : Iterator = args.Orders;
    var output : Array = [];

    var maxOrders = Site.current.preferences.custom.eaOrdersReturnedLimit;
    
    var orderCount = 0;
    if (orders.hasNext()) {
        // while there are more orders to look through and we haven't filled up the bucket of orders to return
        while (orders.hasNext() && (output.length < maxOrders)) {
            var order : Order = orders.next();
            log.info("ExtractOrderData: processing order " + order.getOrderNo());
            
            // get the status (This login taken from Site Genesis!)
            var status = "";
            if ((order.getStatus() == dw.order.Order.ORDER_STATUS_NEW || order.getStatus() == dw.order.Order.ORDER_STATUS_OPEN) && 
                (order.getShippingStatus() == dw.order.Order.SHIPPING_STATUS_SHIPPED) || 
                (order.getStatus() == dw.order.Order.ORDER_STATUS_COMPLETED)) {
                status = dw.web.Resource.msg('order.status.shipped.msg', 'order', null);
            } else if ((order.getStatus() == dw.order.Order.ORDER_STATUS_NEW || order.getStatus() == dw.order.Order.ORDER_STATUS_OPEN) && 
                       (order.getShippingStatus() != dw.order.Order.SHIPPING_STATUS_SHIPPED)) {
                status = dw.web.Resource.msg('order.status.processed.msg', 'order', null);
            } else if (order.getStatus() == dw.order.Order.ORDER_STATUS_FAILED || order.getStatus() == dw.order.Order.ORDER_STATUS_CREATED ){
                // if there are failed or created orders from testing we don't want to include
                continue;
            } else {
                status = order.status.displayValue;
            } 
            
            // Get nicely formatted date
            var date = order.getCreationDate();
            var cal : Calendar = new Calendar(date);
            var niceDate : String = StringUtils.formatCalendar(cal, request.getLocale(), Calendar.LONG_DATE_PATTERN);
            
            // get the first product's image
            var imageURL = '';
            var product : Product = order.defaultShipment.productLineItems.length > 0 ? order.defaultShipment.productLineItems[0].product : null;
            if( product ){
                imageURL = ImageUtils.getImageURL(product, 'cart');
            }
            // get totalNetPrice
            var price = order.totalGrossPrice.value;
            
            var data = {
                creationDate : niceDate,
                orderNo : order.orderNo,
                totalNetPrice : price,
                status : status,
                imageURL : imageURL,
                currencyCode: order.currencyCode
            };
            log.info("ExtractOrderData: order data " + JSON.stringify(data));
            output.push( data );
        }
    }

    args.JSONResponse = {
        httpStatus : 200,
        orders : output
    };
    log.info("ExtractOrderData: exiting script without error");
    return PIPELET_NEXT;
}

module.exports = {
    execute : execute
};
