/**
* Â©2013-2018 salesforce.com, inc. All rights reserved.
*
* Script to fo the following 
*    capture magnetic card data
*    send encrypted data to decryption service
*    create an object with credit card data
*
*
*  @input Track1 : String Track 1 data from magnetic card.
*  @input Track2 : String Track 2 data from magnetic card.
*  @input Owner : String CardHolder from external auth/capture.
*  @input CardType : String CardType from external auth/capture.
*  @input TransactionID : String TransactionID from external auth/capture.
*  @input PaymentReferenceID : String ApprovalCode from external auth/capture.
*  @input AccountNumber : String For manual card entry
*  @input ExpirationDate : String For manual card entry
*  @input IsContactless : Boolean Flag indicating whether payment was contactless or not
*  @input TerminalID : String Terminal id for payment terminal
*  @output creditCard : Object
*
*/
importPackage( dw.system );

var visa : RegExp = new RegExp("^4[0-9]{12}(?:[0-9]{3})?$");
var mastercard : RegExp = new RegExp("^5[1-5][0-9]{14}$");
var amex : RegExp = new RegExp("^3[47][0-9]{13}$");
var discover : RegExp = new RegExp("^65[4-9][0-9]{13}|64[4-9][0-9]{13}|6011[0-9]{12}|(622(?:12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[01][0-9]|92[0-5])[0-9]{10})$");
var dinersclub : RegExp = new RegExp("^3(?:0[0-5]|[68][0-9])[0-9]{11}$");
var jcb : RegExp = new RegExp("^(?:2131|1800|35[0-9]{3})[0-9]{11}$");
var instapayment : RegExp = new RegExp("^63[7-9][0-9]{13}$");
var laser : RegExp = new RegExp("^(6304|6706|6709|6771)[0-9]{12,15}$");
var maestro : RegExp = new RegExp("^(5018|5020|5038|6304|6759|6761|6763)[0-9]{8,15}$");
var solo : RegExp = new RegExp("^(6334|6767)[0-9]{12}|(6334|6767)[0-9]{14}|(6334|6767)[0-9]{15}$");
var unionpay : RegExp = new RegExp("^(62[0-9]{14,17})$");

var cardFormats = {};
cardFormats["Visa"] = visa;
cardFormats["Mastercard"] = mastercard;
cardFormats["Amex"] = amex;
cardFormats["Discover"] = discover;
cardFormats["Diners Club"] = dinersclub;
cardFormats["JCB"] = jcb;
cardFormats["InstaPayment"] = instapayment;
cardFormats["Laser"] = laser;
cardFormats["Maestro"] = maestro;
cardFormats["Solo"] = solo;
cardFormats["Union Pay"] = unionpay;

var keys = [];
for (var key in cardFormats) {
    if (cardFormats.hasOwnProperty(key)) {
        keys.push(key);
    }
}

function execute( args : PipelineDictionary ) : Number
{
    var log : Log = Logger.getLogger("instore-audit-trail");
    log.info("CaptureCreditCardData: entering script");
    
    //get track data
    var track1 : String = args.Track1;
    var track2 : String = args.Track2;
    log.info("CaptureCreditCardData: terminal id: " + args.TerminalID);
        
    var name : String = "";
    var ccNumber : String = "";
    var expMonth : Number = 0;
    var expYr : Number = 0;
    var ccType : String = "";

    if( empty(track1) && empty(track2) ) {
        name = dw.web.Resource.msg('carddetails.name', 'capturecreditcarddetails', null);
        ccNumber = args.AccountNumber;
        expMonth = args.ExpirationDate.substring(0,2);
        expYr = args.ExpirationDate.substring(3);
    } else {
        //Begin
        if (empty(track1)) {
            track1 = "";
        }
        name = track1.substr(track1.indexOf("^", 0)+1, track1.indexOf("^", track1.indexOf("^", 0))-2);  //track1.indexOf("^", 0);
        name = name.replace("/", " ");
        ccNumber= track2.substr(1, track2.indexOf("=", 0)-1);
        expMonth = new Number(track2.substr(track2.indexOf("=", 0)+3, 2));
        expYr = new Number(track2.substr(track2.indexOf("=", 0)+1, 2));
    }

    for (var i = 0; i < keys.length; i++) {
        var cardType : String = keys[i];
        var cardTypeExpression : RegExp = cardFormats[cardType];
        if (cardTypeExpression.test(ccNumber)) {
            ccType = cardType;
            break;
        }
    }

    //Create Credit Card data object
    args.creditCard = {
        owner : name,
        num : ccNumber,
        type : ccType,
        month : expMonth,
        year : expYr
    };
    
    if( !empty(args.Owner) ) {
        args.creditCard.owner = args.Owner;
    }
    if( !empty(args.CardType) ) {
        args.creditCard.type = args.CardType;
    }
    if( !empty(args.TransactionID) ) {
        args.creditCard.transactionID = args.TransactionID;
    }
    if( !empty(args.PaymentReferenceID) ) {
        args.creditCard.paymentReferenceID = args.PaymentReferenceID;
    }
    if(! empty(args.IsContactless) ) {
        args.creditCard.isContactless = args.IsContactless;    
    }
    
    log.info("CaptureCreditCardData: exiting script without error");
    return PIPELET_NEXT;
}

module.exports = {
    execute : execute
};