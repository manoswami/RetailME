/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
*  @input  ParameterMapHttp : Object
*
*/
importPackage( dw.system );
importPackage( dw.web );
importPackage( dw.io );
importPackage( dw.util );


function execute( args : PipelineDictionary ) : Number
{
	var result = saveFile(args.ParameterMapHttp);
	if (result == true) {
		return PIPELET_NEXT;
	}
	else{
		return PIPELET_ERROR;
	}
}


function saveFile(ParameterMapHttp){

	var log : Log = Logger.getLogger("instore-audit-trail");
	log.info("SaveUploadedFile: entering script");
	var filesSaved = true;
	var fileName : String;
	var params : dw.web.HttpParameterMap = ParameterMapHttp;

	var fname = params.filename.stringValue;
	var ftype = params.filetype.stringValue;

	var files : LinkedHashMap = new LinkedHashMap();
	try{
		//callback function
		function op(field, ct, oname){
			fileName = fname;
			var uploadFile : String = oname;
			//Fix for certain IE Browsers posting file paths
			if(uploadFile.lastIndexOf("\\") > 0 ) {
				oname = uploadFile.substr(uploadFile.lastIndexOf("\\")+1);
				fileName = oname;
			}
			
			if(ftype == 'log'){
				return new File( File.IMPEX + File.SEPARATOR + "src/ealogs" + File.SEPARATOR + fileName);
			}else{
				return new File( File.IMPEX + File.SEPARATOR + "src/signatures" + File.SEPARATOR + fileName);
			}
		}
	
		files = params.processMultipart(op);
		var importFile;
		if (!empty(files)) {
			var filesIt = files.keySet().iterator();
			while (filesIt.hasNext()) {
				var orderFiles = filesIt.next();
				importFile = files.get(orderFiles);
				filesSaved = filesSaved & importFile.exists();
			}
		}
	} catch(ex) {
		return false;
	}
	log.info("SaveUploadedFile: exiting script");
	return filesSaved;
}

module.exports={
	saveFile:saveFile
};
